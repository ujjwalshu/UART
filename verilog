module uart_tx(
    input wire clk,reset,       
    input wire [7:0] data,  
    input wire tx_start,    // Signal to start transmission
    output reg tx,          // Transmit data line
    output reg tx_done      // Transmission complete
);

    reg [3:0] bit_count;
    reg [9:0] shift_reg;
    reg transmitting;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            tx <= 1'b1;  // Idle state is high
            tx_done <= 1'b0;
            bit_count <= 4'd0;
            transmitting <= 1'b0;
        end
        else if (tx_start && !transmitting) begin
            shift_reg <= {1'b1, data, 1'b0};  // Start bit, data, stop bit
            bit_count <= 4'd0;
            transmitting <= 1'b1;
            tx_done <= 1'b0;
        end
        else if (transmitting) begin
            tx <= shift_reg[0];
            shift_reg <= shift_reg >> 1;
            bit_count <= bit_count + 1;
            if (bit_count == 4'd9) begin
                transmitting <= 1'b0;
                tx_done <= 1'b1;
                tx <= 1'b1; 
            end
        end
    end
endmodule

module uart_rx(
    input wire clk,reset,         
    input wire rx,            // Receive data line
    output reg [7:0] data,    // 8-bit received data
    output reg rx_done        // Reception complete
);

    reg [3:0] bit_count;
    reg [7:0] shift_reg;
    reg receiving;
    reg rx_sync;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            rx_done <= 1'b0;
            bit_count <= 4'd0;
            receiving <= 1'b0;
            rx_sync <= 1'b1;
        end
        else if (!receiving && !rx) begin  // Start bit detected
            receiving <= 1'b1;
            bit_count <= 4'd0;
        end
        else if (receiving) begin
            shift_reg <= {rx, shift_reg[7:1]};  // Shift in data bits
            bit_count <= bit_count + 1;
            if (bit_count == 4'd8) begin
                receiving <= 1'b0;
                data <= shift_reg;
                rx_done <= 1'b1;  // Data received
            end
        end
    end
endmodule




TESTBENCH
module uart_tb;
    reg clk;
    reg reset;
    reg [7:0] tx_data;
    reg tx_start;
    wire tx;
    wire rx_done;
    wire [7:0] rx_data;

    uart_tx dut(.clk(clk),.reset(reset),.data(tx_data),.tx_start(tx_start),.tx(tx));
    uart_rx uut(.clk(clk),.reset(reset),.rx(tx),.data(rx_data),.rx_done(rx_done));

    initial begin
        clk = 0;
        reset = 1;
        tx_start = 0;
        tx_data = 8'hA5;  
        #10 reset = 0;
        #10 tx_start = 1;
        #10 tx_start = 0;
    end

    always #5 clk = ~clk;  

    initial begin
      $dumpfile("d.vcd");
      $dumpvars;
      $monitor("Time=%0d, TX=%b, RX_Data=%h, RX_Done=%b", $time, tx, rx_data, rx_done);
        #200 $finish;
    end
endmodule

